#!/bin/bash

declare -A cmds
declare -a opts

function add_opt {
  cmds["$1"]="$2"
  opts+=( "$1" )
}

add_opt "Play/Pause" "playerctl play-pause"
add_opt "Switch sound to speakers" "switch-audio-output 'Pebble V3' && notify 'Switched to speakers'"
add_opt "Switch sound to headphones" "switch-audio-output 'Starship/Matisse HD Audio Controller Analog Stereo' && notify 'Switched to headphones'"
add_opt "Suspend system" "systemctl suspend"
add_opt "Allow Plex through Mullvad" "mullvad-exclude-plex"
add_opt "Allow Jellyfin through Mullvad" "mullvad-exclude-jellyfin"

if command -v pulseaudio >/dev/null; then
  add_opt "Kill PulseAudio" "pulseaudio -k"
fi

if command -v openrgb >/dev/null && [ -d ~/.config/OpenRGB ]; then
  for profile in $(basename -s .orp ~/.config/OpenRGB/*.orp); do
    add_opt "openrgb profile: $profile" "openrgb -p $profile"
  done
fi

function notify {
  command -v notify-send >/dev/null && notify-send "$@"
}

function switch-audio-output {
  local description="${1?description missing}"
  local name="$(pactl list sinks | grep "Description: $description" -B1 | head -n1 | awk '{print $2}')"
  if [ -z "$name" ]; then
    echo "could not find sink matching description '$description'" >&2
    return 1
  fi
  echo "$description"
  echo "$name"
  pactl set-default-sink "$name"
}

function mullvad-exclude-plex {
  local pids=0
  for pid in $(pgrep -f plexmediaserver); do
    mullvad split-tunnel add "$pid"
    (( pids++ ))
  done
  notify "Excluded $pids Plex PIDs from Mullvad"
}

function mullvad-exclude-jellyfin {
  local pids=0
  for pid in $(pgrep -f jellyfin); do
    mullvad split-tunnel add "$pid"
    (( pids++ ))
  done
  notify "Excluded $pids Jellyfin PIDs from Mullvad"
}

if [ "$XDG_SESSION_TYPE" = wayland ]; then
  action="$(printf '%s\n' "${opts[@]}" | wofi -d -p action -L 5 -i)"
else
  action="$(printf '%s\n' "${opts[@]}" | rofi -dmenu -p action -l 5 -i)"
fi
cmd="${cmds[${action:-none}]}"

if [ -z "$cmd" ]; then
  exit
fi

result="$(eval "$cmd" 2>&1)"
if [ $? != 0 ]; then
  if command -v notify-send >/dev/null; then
    notify-send -i error -u critical "Failed to execute action '$action'" "$result"
  else
    echo "Failed to execute action '$action': $result" >&2
    exit 1
  fi
fi

