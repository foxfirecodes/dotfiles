#!/bin/bash

declare -A cmds
declare -a opts

function add_opt {
  cmds["$1"]="$2"
  opts+=( "$1" )
}

add_opt "Play/Pause" "playerctl play-pause"
add_opt "yewtube" "kitty bash -c 'tmux at -t yewtube || tmux new-session -s yewtube yt'"
add_opt "Switch sound to speakers" "switch-audo-output 'Pebble V3 Analog Stereo'"
add_opt "Switch sound to headphones" "switch-audo-output 'GA102 High Definition Audio Controller Digital Stereo (HDMI)'"
add_opt "SSH into VPS" "ssh-into-vps"
add_opt "Kill PulseAudio" "pulseaudio -k"

# add_opt "Fix webcam" "fix-webcam"
# add_opt "Screenshot Area" "$HOME/.bin/quick-screenshot"

if command -v cpufreq-info >/dev/null; then
  for governer in $(cpufreq-info -g); do
    opts+=( ["CPU Mode: $governer"]="set-cpu-mode $governer" )
  done
fi

function switch-audo-output {
  local description="${1?description missing}"
  local name="$(pactl list sinks | grep "Description: $description" -B1 | head -n1 | awk '{print $2}')"
  if [ -z "$name" ]; then
    echo "could not find sink matching description '$description'" >&2
    return 1
  fi
  echo "$description"
  echo "$name"
  pactl set-default-sink "$name"
}

function ssh-into-vps {
  kitty tmux new-session 'exec ssh infra-2'
}

function fix-webcam {
  urxvt -geometry 30x5 -e "$HOME/.bin/fix-webcam"
}

function sudoask {
  SUDO_ASKPASS="$HOME/.bin/askpass-secret-tool" sudo -A "$@"
}

function notify {
  command -v notify-send >/dev/null && notify-send "$@"
}

function set-cpu-mode {
  local mode="$1"
  sudoask cpufreq-set -g "$mode"
  notify -t 3000 -i system-settings "CPU mode changed" "Now set to $mode"
}

action="$(printf '%s\n' "${opts[@]}" | rofi -dmenu -p action -l 5 -i)"
cmd="${cmds[${action:-none}]}"

if [ -z "$cmd" ]; then
  exit
fi

result="$(eval "$cmd" 2>&1)"
if [ $? != 0 ]; then
  if command -v notify-send >/dev/null; then
    notify-send -i error -u critical "Failed to execute action '$action'" "$result"
  else 
    echo "Failed to execute action '$action': $result" >&2
    exit 1
  fi
fi

