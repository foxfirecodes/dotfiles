#!/usr/bin/env /usr/bin/node

const path = require('path');
const fs = require('fs');
const os = require('os');

const mkdirp = folder => {
    const parts = folder.split(path.sep);
    let current = parts.shift();
    // handle paths starting with `/` (e.g. /home/rayzr/...)
    if (current == '') {
        current = path.join('/', parts.shift());
    }

    while (current !== undefined) {
        if (!fs.existsSync(current) || !fs.statSync(current).isDirectory()) {
            fs.mkdirSync(current);
        }

        if (parts.length < 1) {
            break;
        }

        current = path.join(current, parts.shift());
    }
};

const input = (prompt) => new Promise((res, rej) => {
    const rl = require('readline').createInterface({
        input: process.stdin
    });

    if (prompt) {
        process.stdout.write(prompt);
    }

    rl.once('line', line => {
        rl.close();
        res(line);
    });

    rl.on('SIGINT', () => {
        rl.close();
        rej();
    });
});

const confirm = async (prompt) => {
    return /^[yY]/i.test(await input(prompt));
};

const pluralize = (word, num) => (num >= 1 && num < 2) ? word : `${word}s`;

const format = (num, name) => `${Math.floor(num)} ${pluralize(name, num)}`;

const months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];

const getMonth = input => {
    if (isNaN(input)) {
        return months.indexOf(input.toLowerCase());
    } else {
        return parseInt(input) - 1;
    }
};

const makeDate = (year, month, day, hour, minute, second) => {
    const date = new Date();
    date.setFullYear(year < 100 ? 2000 + year : year);
    date.setMonth(month);
    date.setDate(day);
    date.setHours(hour);
    date.setMinutes(minute);
    date.setSeconds(second);
    return date;
};

const home = os.userInfo().homedir;
const settingsFolder = path.join(home, '.config', 'countdowns');
mkdirp(settingsFolder);
const settingsFile = path.join(settingsFolder, 'settings.json');
const settings = !fs.existsSync(settingsFile) ? { countdowns: {} } : JSON.parse(fs.readFileSync(settingsFile));

const save = () => fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 4));

const main = async (args) => {
    if (args.length < 1) {
        console.log(`Usage: countdown <-adl>

Options:

-a|--add
    Adds a new countdown

-d|--del
    Deletes a countdown

-l|--list
    Lists all countdowns`);

        process.exit(1);
    }

    if (args[0] === '-a' || args[0] === '--add') {
        const name = await input('Please enter the name of the new countdown: ');

        if (settings.countdowns[name]) {
            if (!(await confirm(`The countdown '${name}' already exists. Would you like to overwrite it? [y/N] `))) {
                process.exit(1);
            }
        }

        const time = [];
        const parts = ['year', 'month', 'day', 'hour', 'minute', 'second'];

        for (let i in parts) {
            const part = parts[i];
            time.push((part === 'month' ? getMonth : parseInt)(await input(`Please enter the ${part}: `)));
        }

        const date = makeDate.apply(null, time);

        console.log(`Setting date to ${date}`);
        if (!(await confirm('Is this correct? [y/N] '))) {
            process.exit(1);
        }

        settings.countdowns[name] = date.getTime();
        save();

        console.log(`Set countdown '${name}' to ${date}`);
    } else if (args[0] === '-d' || args[0] === '--del') {
        const name = await input('Please enter the name of the countdown to delete: ');

        if (!settings.countdowns[name]) {
            console.error(`The countdown ${name} doesn't exist!`);
            process.exit(1);
        }

        if (!(await confirm(`Are you sure you want to delete the countdown '${name}'? [y/N] `))) {
            process.exit(1);
        }

        delete settings.countdowns[name];
        save();

        console.log(`Deleted countdown '${name}'`);
    } else if (args[0] === '-l' || args[0] === '--list') {
        const names = Object.keys(settings.countdowns);
        names.forEach(name => {
            const time = new Date(settings.countdowns[name]);
            console.log(`- ${name}: ${time}`);
        });
    } else {
        const name = args[0];
        const time = settings.countdowns[name];

        if (!time) {
            console.error(`The countdown '${name}' does not exist`);
            process.exit(1);
        }

        const now = new Date();
        const then = new Date(time);

        let suffix = '';
        let diff = then.getTime() - now.getTime();

        if (diff < 0) {
            diff = Math.abs(diff);
            suffix = ' ago';
        }

        let seconds = diff / 1000;

        let minutes = seconds / 60;
        seconds = seconds % 60;

        let hours = minutes / 60;
        minutes = minutes % 60;

        let days = hours / 24;
        hours = hours % 24;


        console.log(`${format(days, 'day')}, ${format(hours, 'hour')}, ${format(minutes, 'minute')}, ${format(seconds, 'second')}${suffix}`);
    }
};

(async () => {
    try {
        await main(process.argv.slice(2));
    } catch (err) {
        if (process.env.DEBUG) {
            console.error(err);
        } else {
            console.error('Failed to run, set the DEBUG environment variable to true to see errors.');
            process.exit(1);
        }
    }
})();
